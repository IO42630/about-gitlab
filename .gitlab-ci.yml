stages:
    - setup
    - build
    - test
    - docker


services:
    - docker:dind

variables:
    # Define global variables here
    MAVEN_CLI_OPTS: "-s .m2/settings.xml --batch-mode"
    MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"
    DOCKER_REGISTRY_URL: "http://192.168.1.7:9020"
    DOCKER_IMAGE_NAME: "about-gitlab"
    DOCKER_IMAGE_VERSION: "0.0"
    DOCKER_IMAGE_TAG: "$DOCKER_IMAGE_VERSION:$DOCKER_IMAGE_VERSION"
    NEXUS_REPO: "repository/docker-nexus"


before_script:
    # Commands to run before EACH job
    - echo "Hello, $GITLAB_USER_LOGIN!"
    - export MAVEN_CLI_OPTS
    - export MAVEN_OPTS

after_script:
    # Commands to run after EACH job
    - echo "End of job"

cache:
    # Caching is a mechanism to speed up your CI/CD pipeline by reusing dependencies between pipeline runs.
    paths:
        - .m2/repository
        - frontend/node_modules/
        - target/


setup_job_1:
    stage: setup
    script:
        - apk --no-cache add nodejs npm
        - cd frontend
        - npm install
    tags:
        - maven, jdk17

# this is the job name, not a reserved keyword
build_job_1:
    stage: build
    script:
        # Commands to execute in this job
        - mvn $MAVEN_CLI_OPTS clean
    tags:
        - maven, jdk17

build_job_2:
    stage: build
    script:
        - mvn $MAVEN_CLI_OPTS compile
    needs:
        - "build_job_1"
    tags:
        - maven, jdk17

test_job_1:
    stage: test
    script:
        - echo "Testing..."
    tags:
        - maven


docker_job_1:
    stage: docker
    script:
        - apk add --no-cache docker-cli
        - cd docker
        - sudo docker info
        - sudo docker build -t $DOCKER_IMAGE_TAG .
        - sudo docker tag $DOCKER_IMAGE_TAG $DOCKER_REGISTRY_URL/$NEXUS_REPO/$DOCKER_IMAGE_TAG
        - sudo docker push $DOCKER_REGISTRY_URL/$NEXUS_REPO/$DOCKER_IMAGE_TAG
    tags:
        - maven


# Questions for later:
# - I've seem more stages, how does that work?
# - How does caching work?
# - What does when do?
# - So tags are OR? One is enough?
# - What exaclty determines when a new docker runner is created? (it seems expensive)