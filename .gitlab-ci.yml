stages:
    - setup
    - build
    - test
    - deploy

variables:
    # Define global variables here
    MAVEN_CLI_OPTS: "-s .m2/settings.xml --batch-mode"
    MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"

before_script:
    # Commands to run before each job
    - echo "Hello, $GITLAB_USER_LOGIN!"
    - export MAVEN_CLI_OPTS
    - export MAVEN_OPTS

cache:
    # Caching is a mechanism to speed up your CI/CD pipeline by reusing dependencies between pipeline runs.
    paths:
        - .m2/repository
        - frontend/node_modules/
        - target/


setup_job_1:
    stage: setup
    script:
        - echo "Setting up..."
        - echo -e "
            \033[1m╔══════════════════════╗
            ║   🚀 Setting up the    ║
            ║  legendary environment ║
            ╚══════════════════════╝\033[0m
            "

        - apk --no-cache add nodejs npm
        - cd frontend
        - npm install
    tags:
        - maven, jdk17

# this is the job name, not a reserved keyword
build_job_1:
    stage: build
    script:
        # Commands to execute in this job
        - mvn $MAVEN_CLI_OPTS clean
    tags:
        - maven, jdk17

build_job_2:
    stage: build
    script:
        - mvn $MAVEN_CLI_OPTS compile
    needs:
        - "build_job_1"
    tags:
        - maven, jdk17

test_job_1:
    stage: test
    script:
        - echo "Testing..."
    tags:
        - maven

deploy_job_1:
    stage: deploy
    script:
        - echo "Deploying..."
    tags:
        - maven

# Questions for later:
# - I've seem more stages, how does that work?
# - How does caching work?
# - What does when do?
# - So tags are OR? One is enough?
# - What exaclty determines when a new docker runner is created? (it seems expensive)